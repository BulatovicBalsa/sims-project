<Window x:Class="Hospital.GUI.Views.PhysicalAssets.AddStaticEquipmentTransfer"
        x:Name="SendTransferWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:viewModels="clr-namespace:Hospital.GUI.ViewModels.PhysicalAssets"
        xmlns:valRule="clr-namespace:Hospital.ValidationRules"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        mc:Ignorable="d"
        Title="AddStaticEquipmentTransfer" Height="450" Width="1200">
    <Window.DataContext>
        <viewModels:AddStaticEquipmentTransferViewModel />
    </Window.DataContext>

    <Window.Resources>
        <Style TargetType="ComboBoxItem">
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style>
    </Window.Resources>


    <DockPanel LastChildFill="True">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <ComboBox x:Name="SelectEquipmentComboBox" ItemsSource="{Binding Equipment, Mode=TwoWay}"
                      SelectedItem="{Binding SelectedEquipment, Mode=TwoWay}" Grid.Row="0" Grid.Column="0"
                      Text="Select equipment"
                      VerticalContentAlignment="Center" HorizontalContentAlignment="Center">
                <ComboBox.ItemContainerStyle>
                    <Style TargetType="ComboBoxItem">
                        <Setter Property="HorizontalContentAlignment" Value="Center" />
                        <Setter Property="VerticalContentAlignment" Value="Center" />
                    </Style>
                </ComboBox.ItemContainerStyle>
            </ComboBox>
            <Label Height="50"
                   Width="180"
                   HorizontalAlignment="Left"
                   DataContext="{Binding ElementName=SelectEquipmentComboBox,Path=SelectedItem}"
                   Content="Inventory">
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="FontSize" Value="9" />
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                        <Setter Property="VerticalContentAlignment" Value="Top" />
                        <Setter Property="Foreground" Value="{x:Static SystemColors.GrayTextBrush}" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=SelectEquipmentComboBox,Path=SelectedItem}"
                                         Value="{x:Null}">
                                <Setter Property="HorizontalContentAlignment" Value="Center" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                                <Setter Property="FontSize" Value="15" />
                            </DataTrigger>

                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <Button Grid.Row="0" Grid.Column="1" Content="Add" Command="{Binding AddItemCommand}" Width="45"
                    HorizontalAlignment="Left" Margin="0 0 0 0" />

            <ComboBox x:Name="SelectOriginComboBox" ItemsSource="{Binding Rooms, Mode=TwoWay}"
                      SelectedItem="{Binding SelectedOrigin, Mode=TwoWay}" Grid.Row="0" Grid.Column="2"
                      Text="Select origin"
                      VerticalContentAlignment="Center" HorizontalContentAlignment="Center" />
            <Label Height="50"
                   Width="180"
                   HorizontalAlignment="Left"
                   DataContext="{Binding ElementName=SelectOriginComboBox,Path=SelectedItem}"
                   Content="Origin room"
                   Grid.Row="0"
                   Grid.Column="2">
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="FontSize" Value="9" />
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                        <Setter Property="VerticalContentAlignment" Value="Top" />
                        <Setter Property="Foreground" Value="{x:Static SystemColors.GrayTextBrush}" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=SelectOriginComboBox,Path=SelectedItem}"
                                         Value="{x:Null}">
                                <Setter Property="HorizontalContentAlignment" Value="Center" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                                <Setter Property="FontSize" Value="15" />
                            </DataTrigger>

                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>

            <ComboBox Grid.Row="0" Grid.Column="3" x:Name="SelectDestinationComboBox"
                      ItemsSource="{Binding Rooms, Mode=TwoWay}"
                      HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                      SelectedItem="{Binding SelectedDestination, Mode=TwoWay}" />
            <Label Height="50"
                   Width="180"
                   HorizontalAlignment="Left"
                   DataContext="{Binding ElementName=SelectDestinationComboBox,Path=SelectedItem}"
                   Content="Destination room"
                   Grid.Row="0"
                   Grid.Column="3">
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="FontSize" Value="9" />
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                        <Setter Property="VerticalContentAlignment" Value="Top" />
                        <Setter Property="Foreground" Value="{x:Static SystemColors.GrayTextBrush}" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=SelectDestinationComboBox,Path=SelectedItem}"
                                         Value="{x:Null}">
                                <Setter Property="HorizontalContentAlignment" Value="Center" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                                <Setter Property="FontSize" Value="15" />
                            </DataTrigger>

                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>

            <xctk:DateTimePicker Grid.Row="0" Grid.Column="4" VerticalAlignment="Top"
                                 Value="{Binding Date, Mode=TwoWay}" />

            <Button Grid.Row="0" Grid.Column="5" Content="Submit" Command="{Binding SendTransferCommand}"
                    CommandParameter="{Binding ElementName=SendTransferWindow}" Width="50" HorizontalAlignment="Right" />
            <DataGrid ItemsSource="{Binding Items, Mode=TwoWay}" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="6"
                      AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Inventory" Binding="{Binding Equipment}" Width="*" IsReadOnly="True" />
                    <DataGridTextColumn Header="Amount" Width="*" x:Name="AmountColumn">

                        <DataGridTextColumn.EditingElementStyle>
                            <Style TargetType="TextBox">
                                <Setter Property="Validation.ErrorTemplate">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <StackPanel>
                                                <AdornedElementPlaceholder x:Name="placeholder" />
                                                <TextBlock Background="Red" Foreground="White" x:Name="ErrorTextBlock"
                                                           Text="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.Errors).CurrentItem.ErrorContent}"
                                                           HorizontalAlignment="Left" />

                                            </StackPanel>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                            <!-- <Style TargetType="TextBox">
                                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)/ErrorContent}"/>
                            </Style> -->
                        </DataGridTextColumn.EditingElementStyle>
                        <DataGridTextColumn.Binding>
                            <Binding Path="Amount" UpdateSourceTrigger="PropertyChanged" ValidatesOnDataErrors="True">
                                <Binding.ValidationRules>
                                    <valRule:IntRangeRule Min="1" Max="1000" />
                                </Binding.ValidationRules>
                            </Binding>
                        </DataGridTextColumn.Binding>
                    </DataGridTextColumn>

                </DataGrid.Columns>
            </DataGrid>
        </Grid>
        <Popup Name="MyPopup" IsOpen="False">
            <Border BorderThickness="1">
                <TextBlock Name="MyPopupText" Background="LightBlue" Foreground="Blue" Padding="30"
                           Text="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)/ErrorContent}" />
            </Border>
        </Popup>
    </DockPanel>
</Window>