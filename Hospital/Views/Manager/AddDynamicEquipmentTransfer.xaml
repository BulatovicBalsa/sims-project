<Window x:Class="Hospital.Views.Manager.AddDynamicEquipmentTransfer"
        x:Name="SendDynamicEquipmentTransferWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Hospital.Views.Manager"
        xmlns:model="clr-namespace:Hospital.Models.Manager"
        xmlns:viewModels="clr-namespace:Hospital.ViewModels.Manager"
        xmlns:valRule="clr-namespace:Hospital.ValidationRules"
        xmlns:converters="clr-namespace:Hospital.Converters"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
 
        mc:Ignorable="d"
        Title="AddDynamicEquipmentTransfer" Height="450" Width="1200">
    <Window.DataContext>
        <viewModels:AddDynamicEquipmentTransferViewModel />
    </Window.DataContext>

    <Window.Resources>
        <converters:EquipmentToAmountInRoomTextColorConverter x:Key="EquipmentToAmountInRoomTextColorConverter" />
        <Style TargetType="ComboBoxItem">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>
    </Window.Resources>
    <DockPanel LastChildFill="True">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <ComboBox x:Name="SelectEquipmentComboBox" ItemsSource="{Binding Equipment, Mode=TwoWay}"
                      SelectedItem="{Binding SelectedEquipment, Mode=TwoWay}" Grid.Row="0" Grid.Column="0" Text="Select equipment"
                      HorizontalContentAlignment="Center" VerticalContentAlignment="Center" VirtualizingPanel.IsVirtualizing="False">
                <ComboBox.ItemContainerStyle>
                    <Style TargetType="ComboBoxItem">
                        <Setter Property="HorizontalContentAlignment" Value="Center" />
                        <Setter Property="VerticalContentAlignment" Value="Center" />
                        <Setter Property="Foreground">
                            <Setter.Value>
                                <MultiBinding Converter="{StaticResource EquipmentToAmountInRoomTextColorConverter}">
                                    <Binding Path="." />
                                    <Binding Path="DataContext.SelectedDestination" ElementName="SelectDestinationComboBox" />
                                </MultiBinding>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ComboBox.ItemContainerStyle>
            </ComboBox>
            <Label  Height="50"
                    Width="180"
                    HorizontalAlignment="Left"
                    DataContext="{Binding ElementName=SelectEquipmentComboBox,Path=SelectedItem}"  
                    Content="Equipment"

            >
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="FontSize" Value="9"></Setter>
                        <Setter Property="Background" Value="Transparent"></Setter>
                        <Setter Property="HorizontalContentAlignment" Value="Left"/>
                        <Setter Property="VerticalContentAlignment" Value="Top"/>
                        <Setter Property="Foreground" Value="{x:Static SystemColors.GrayTextBrush}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=SelectEquipmentComboBox,Path=SelectedItem}" Value="{x:Null}">
                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                <Setter Property="VerticalContentAlignment" Value="Center"/>
                                <Setter Property="FontSize" Value="15"></Setter>
                            </DataTrigger>

                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>
            <Button Grid.Row="0" Grid.Column="1" Content="Add" Command="{Binding AddItemCommand}" Width="45"
                    HorizontalAlignment="Left" Margin="0 0 0 0"/>

            <ComboBox x:Name="SelectOriginComboBox" ItemsSource="{Binding Rooms, Mode=TwoWay}"
                      SelectedItem="{Binding SelectedOrigin, Mode=TwoWay}" Grid.Row="0" Grid.Column="2" Text="Select origin" 
                      VerticalContentAlignment="Center" HorizontalContentAlignment="Center" />
            <Label  Height="50"  
                    Width="180"
                    HorizontalAlignment="Left"
                    DataContext="{Binding ElementName=SelectOriginComboBox,Path=SelectedItem}"  
                    Content="Origin room"
                    Grid.Row="0"
                    Grid.Column="2"

            >
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="FontSize" Value="9"></Setter>
                        <Setter Property="Background" Value="Transparent"></Setter>
                        <Setter Property="HorizontalContentAlignment" Value="Left"/>
                        <Setter Property="VerticalContentAlignment" Value="Top"/>
                        <Setter Property="Foreground" Value="{x:Static SystemColors.GrayTextBrush}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=SelectOriginComboBox,Path=SelectedItem}" Value="{x:Null}">
                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                <Setter Property="VerticalContentAlignment" Value="Center"/>
                                <Setter Property="FontSize" Value="15"></Setter>
                            </DataTrigger>

                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>

            <ComboBox Grid.Row="0" Grid.Column="3" x:Name="SelectDestinationComboBox" ItemsSource="{Binding DestinationRooms, Mode=TwoWay}" 
                      HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                      SelectedItem="{Binding SelectedDestination, Mode=TwoWay}"
                      />
            <Label  Height="50"
                    Width="180"
                    HorizontalAlignment="Left"
                    DataContext="{Binding ElementName=SelectDestinationComboBox,Path=SelectedItem}"  
                    Content="Destination room"
                    Grid.Row="0"
                    Grid.Column="3"

            >
                <Label.Style>
                    <Style TargetType="Label">
                        <Setter Property="FontSize" Value="9"></Setter>
                        <Setter Property="Background" Value="Transparent"></Setter>
                        <Setter Property="HorizontalContentAlignment" Value="Left"/>
                        <Setter Property="VerticalContentAlignment" Value="Top"/>
                        <Setter Property="Foreground" Value="{x:Static SystemColors.GrayTextBrush}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=SelectDestinationComboBox,Path=SelectedItem}" Value="{x:Null}">
                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                <Setter Property="VerticalContentAlignment" Value="Center"/>
                                <Setter Property="FontSize" Value="15"></Setter>
                            </DataTrigger>

                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>

            <Button Grid.Row="0" Grid.Column="5" Content="Submit" Command="{Binding SendTransferCommand}"
                    CommandParameter="{Binding ElementName=SendDynamicEquipmentTransferWindow}" Width="50" HorizontalAlignment="Right" />
            <DataGrid ItemsSource="{Binding Items, Mode=TwoWay}" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="6"
                      AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Equipment" Binding="{Binding Equipment}" Width="*" IsReadOnly="True" />
                    <DataGridTextColumn Header="Amount" Width="*" x:Name="AmountColumn">

                        <DataGridTextColumn.EditingElementStyle>
                            <Style TargetType="TextBox">
                                <Setter Property="Validation.ErrorTemplate">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <StackPanel>
                                                <AdornedElementPlaceholder x:Name="placeholder" />
                                                <TextBlock Background="Red" Foreground="White" x:Name="ErrorTextBlock" Text="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.Errors).CurrentItem.ErrorContent}" HorizontalAlignment="Left" />

                                            </StackPanel>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                            <!-- <Style TargetType="TextBox">
                                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)/ErrorContent}"/>
                            </Style> -->
                        </DataGridTextColumn.EditingElementStyle>
                        <DataGridTextColumn.Binding>
                            <Binding Path="Amount" UpdateSourceTrigger="PropertyChanged" ValidatesOnDataErrors="True">
                                <Binding.ValidationRules>
                                    <valRule:IntRangeRule Min="1" Max="1000" />
                                </Binding.ValidationRules>
                            </Binding>
                        </DataGridTextColumn.Binding>
                    </DataGridTextColumn>

                </DataGrid.Columns>
            </DataGrid>
        </Grid>
        <Popup Name="MyPopup" IsOpen="False">
            <Border BorderThickness="1">
                <TextBlock Name="MyPopupText" Background="LightBlue" Foreground="Blue" Padding="30" Text="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)/ErrorContent}">
                </TextBlock>
            </Border>
        </Popup>
    </DockPanel>

</Window>
